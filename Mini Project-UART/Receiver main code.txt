// UART Receiver
module uart_receiver (
 input clk, // System clock
 input reset, // Reset signal
 input rx, // Receiver input
 output reg enable, // Enable signal
 output reg [7:0] data, // Received data
 output reg rx_valid // Receiver valid flag
);
 reg [3:0] bit_count;
 reg [10:0] shift_reg;
 reg start_bit;
 reg stop_bit;
 always @(posedge clk or posedge reset) begin
 if (reset) begin
 enable <= 1'b0;
 data <= 8'b0;
 rx_valid <= 1'b0;
 bit_count <= 4'b0;
 shift_reg <= 11'b0;
 start_bit <= 1'b0;
 stop_bit <= 1'b0;
 end
 else begin
 if (rx == 1'b0 && !start_bit && !stop_bit) begin
 // Start bit detected
 enable <= 1'b1;
 bit_count <= 4'd1;
 start_bit <= 1'b1;
 shift_reg <= {shift_reg[9:0], rx};
 end
 else if (enable && bit_count >= 4'd1 && bit_count <= 4'd8) begin
 // Data bits
 shift_reg <= {shift_reg[9:0], rx};
 bit_count <= bit_count + 1;
 end
 else if (enable && bit_count == 4'd9) begin
 // Stop bit detected
 enable <= 1'b0;
 rx_valid <= 1'b1;
 stop_bit <= 1'b1;
 data <= shift_reg[7:0];
 bit_count <= bit_count + 1;
 end
 else if (rx_valid && bit_count == 4'd10) begin
 // End of reception
 rx_valid <= 1'b0;
 bit_count <= 4'd0;
 end
 else begin
 // Idle state
 enable <= 1'b0;
 start_bit <= 1'b0;
 stop_bit <= 1'b0;
 end
 end
 end
endmodule
